  window.redraw_composition = () =>
    debug=true
    # It refreshes the whole page
    # TODO: avoid refreshing parts that didn't change
    composition_view=window.the_composition
    for view_line in composition_view.lines() # hack
      if /^\s*$/.test(view_line.source())
         view_line.rendered_in_html('(empty line)')
         view_line.line_parse_failed(false)
         view_line.line_has_warnings(false)
         view_line.line_warnings([])

    if composition_view.last_doremi_source isnt composition_view.doremi_source() # the source changed
      composition_view.last_doremi_source = composition_view.doremi_source()
      parsed=composition_view.composition_parse()
      if !parsed?  # Didn't parse
        console.log "Parse failed" if debug
        composition_view.composition_parse_failed(true)
        # sadly, run the line parser on each line in the view 
        # to find which line or lines
        # didn't parse.
        for view_line in composition_view.lines()
          console.log "composition parse failed, checking #{view_line.source()}"
          try
            source=view_line.source()
            parsed_line=DoremiScriptLineParser.parse(source)
            html=line_to_html(parsed_line)
            view_line.rendered_in_html(html)
            view_line.line_parse_failed(false)
          catch err # line didn't parse
            view_line.line_parse_failed(true)
            view_line.line_has_warnings(false)
            view_line.line_warnings([])
            view_line.rendered_in_html("<pre>Didn't parse\n#{view_line.source()}</pre>")
      else # parse succeeded.
        composition_view.composition_parse_failed(false)
        composition_view.composition_parsed_doremi_script(parsed)
        if composition_view.composition_musicxml_source_visible()
          composition_view.composition_musicxml_source(to_musicxml(parsed))
        parsed_lines=parsed.lines
        view_lines=composition_view.lines()
        ctr=0
        if parsed_lines.length isnt view_lines.length
          console.log "Info:assertion failed parsed_lines.length isnt view_lines.length"
        for parsed_line in parsed_lines
          view_line=view_lines[ctr]
          if /^\s*$/.test(view_line.source())
            view_line.rendered_in_html('(empty line)')
            next
          # Update the view
          # TODO: should I be calling init on the line?
          # TODO: add parsed_line as an attribute of LineView ?
          # Note that the parsed_line has all the information
          # needed to render it.

          # render line as html-see html_renderer.coffee
          html=line_to_html(parsed_line)
          view_line.line_parse_failed(false)
          view_line.rendered_in_html(html)
          warnings=parsed_line.line_warnings
          view_line.line_warnings(warnings)
          view_line.line_has_warnings(warnings.length > 0)
          ctr++
        dom_fixes()
    else
      # If we didn't run the renderer, run dom_fixes in case something
      # has changed
      dom_fixes()
    # At the end of the task, re-start the timer
    debug=false
    last_line_opened=composition_view.last_line_opened
    if last_line_opened?
      console.log "scroll to #{last_line_opened}"
      top=$("#div_line_#{last_line_opened}").offset().top
      console.log("top is",top)
      $('html, body').animate({ scrollTop: top}, 2000)
      composition_view.last_line_opened=null
    #t=setTimeout("timed_count()",500)  # TODO: use try catch to make sure timer always gets re-run
